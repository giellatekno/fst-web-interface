{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-even-is-this","title":"What even is this?","text":"<p>fst-web-interface is a web-based set of language tools, primarily aimed at linguists. There are tools for paradigm generation, analysis, etc, for a number of languages, some better than others, that the Giellatekno group develops language models for.</p> <p>fst-web-interface replaces the cgi-bin-based setup, which can currently be seen at giellatekno.uit.no</p>"},{"location":"#architechture","title":"Architechture","text":"<p>Broadly speaking, there is a client-side Svelte web app, which fetches data from a server-side FastAPI API. The API uses the normal hfst tool-chain with the Giellatekno language models to provide results to queries coming from the client-side.</p> <p>For everything related to hfst and the Giellatekno language models, check out Giellatekno documentation.</p>"},{"location":"#project-layout","title":"Project layout","text":"<p>In the root folder, the client-side page is stored.</p> <p>api  cgi-scripts  docs  index.html  jsconfig.json  locales  node_modules  package.json  package-lock.json  perl_extractions  README.md  src  svelte.config.js  vite.config.js</p> <pre><code>api/              -- everything related to the api\ncgi-scripts/      -- a copy of the old cgi scripts, for reference\nlocales/          -- locale data\ndocs/             -- documentation (you're reading it now)\n    README.md     -- documentation documentation\nnode_modules/     -- used by npm, where js packages used in the project are stored\n</code></pre>"},{"location":"api/","title":"API","text":"<p>FastAPI automatically documents the routes in the API using OpenAPI. They can be read at /docs or /redoc.</p> <p>Note</p> <p>Use hoppscotch to manually test out API queries.</p>"},{"location":"api/#architecture","title":"Architecture","text":"<p>Routes in the API is dynamically imported from the toolspecs/ folder.</p> <p>One file in the toolspecs/ folder corresponds to one route.</p> <p>Each of those files defines a few names:</p> <pre><code>summary            -- string\ndescription        -- string\npipeline           -- list\n</code></pre>"},{"location":"api/#project-layout","title":"Project layout","text":"<pre><code>main.py            -- entry point\ntoolspecs/         -- tool specifications\n</code></pre>"},{"location":"deployment/","title":"Deployment","text":"<p>We need compiled fst files.</p> <p>We build everything ourselves using the <code>build.py</code> script.</p> <p>The final output image for the API only needs the resulting files.</p>"},{"location":"docsdocs/","title":"Meta Documentation","text":"<p>Meta documentation, i.e. documentation about the documentation.</p> <p>This is the same document as docs/README.md.</p> <p>The documentation is an mkdocs site, with the material theme. Documentation is written as markdown files, and gets rendered to html with a nice theme by these tools.</p>"},{"location":"docsdocs/#view","title":"View","text":"<p>The build output is a static web site located in the site/ folder. Just open up the index.html page in a browser to view the documentation.</p> <pre><code>firefox site/index.html\n</code></pre>"},{"location":"docsdocs/#writing-documentation","title":"Writing documentation","text":""},{"location":"docsdocs/#first-time-setup","title":"First time setup","text":"<p>mkdocs is a python tool. Create a virtual environment, activate it, and install the requirements. The first and last step is only done once.</p> <pre><code>python3 -m venv .venv\n. .venv/bin/activate\npip install -r -requirements.txt\n</code></pre> <p>When coming back to the documentation, only the second command (<code>. .venv/bin/activate</code>), needs to be run.</p>"},{"location":"docsdocs/#writing-and-serving","title":"Writing and serving","text":"<p>In order to write documentation, just write markdown files, in the docs/ folder. To be able to see the generated html output while writing, mkdocs can be run with </p> <pre><code>mkdocs serve\n</code></pre> <p>If the fst-web-interface application is also running, the default port will be used. Specify another one with:</p> <pre><code>mkdocs serve -a localhost:8001\n</code></pre> <p>Open up a browser at that address to see the generated documentation as you write it.</p> <p>To build the final documentation site, use</p> <pre><code>mkdocs build\n</code></pre> <p>It ends up as a static build in the site/ directory, as mentioned above.</p>"},{"location":"local-development/","title":"Local development","text":""},{"location":"local-development/#prerequisites","title":"Prerequisites","text":"<p>Being a web project, make sure to have a working version of node, as well as npm (or pnpm) installed on your system.</p> <p>Packages called <code>node</code> or <code>nodejs</code> should be available in most distributions. nvm (\"node version manager\") is an alternative great way to be able to have mulitple versions of node installed on a system, and quickly switch between them.</p> <p>For FastAPI, the minimum required python version is 3.10. Check the locally installed python version with <code>python3 --version</code>. pyenv (python version manager) will let you install mulitple python versions on your system, and switch between them. It's basically for Python what nvm is for node.</p>"},{"location":"local-development/#installation","title":"Installation","text":"<p>To run the development server, navigate to the folder after cloning, and install the dependencies.</p> <pre><code>git clone https://github.com/giellatekno/fst-web-interface\ncd fst-web-interface\nnpm install\nnpm run dev\n</code></pre> <p>Now visit the locally running development server at localhost:5173. Modifications to source files will instantly be reflected in the browser window, due to something called \"hot module reloading\".</p> <p>To run the api in development, navigate to the folder, create a virtual environment, install requirements, and then run the web server:</p> <pre><code>cd fst-web-interface/api\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\nuvicorn src.main:app --reload\n</code></pre> <p>Now the API is accessible at port 8000, and two different OpenAPI schema explorers are available at /redoc and /docs. In my opinon, the /redoc one is nicer, but the /docs one will let you test queries to the API directly on the documentation site.</p>"},{"location":"local-development/#development-after-initial-setup","title":"Development after initial setup","text":"<p>For the front-end app, <code>npm install</code> is only required when first setting up the development. Likewise, for python, the steps to install the virtual environment (<code>python -m venv .venv</code>) and installing required packages (<code>pip install -r requirements.txt</code>) are first-time-only required steps.</p>"},{"location":"local-development/#resources","title":"Resources","text":"<p>The javascript frontend framework in this project is Svelte. Read about it at svelte.dev.</p> <p>The API framework is FastAPI. Read about it at fastapi.tiangolo.com.</p>"},{"location":"local-development/#deployment","title":"Deployment","text":"<p>At this point, how we do deployment for this project is yet to be determined.</p> <p>The Svelte app builds to static html/css/js, and can be served by any web server. But keep in mind that it is a SPA, and as such, all requests for \"children\" routes should all resolve to index.html.</p> <p>For the API, there are numerous options, including containerized type setups, documented on the FastAPI website.</p>"}]}